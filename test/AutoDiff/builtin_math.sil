// RUN: %target-swift-frontend -emit-sil -O %s | %FileCheck %s

import Builtin
import Swift

sil_stage raw

sil @simple_mul : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
bb0(%0 : @trivial $Builtin.FPIEEE32, %1 : @trivial $Builtin.FPIEEE32):
  %2 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  return %2 : $Builtin.FPIEEE32
}

sil @simple_div : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
bb0(%0 : @trivial $Builtin.FPIEEE32, %1 : @trivial $Builtin.FPIEEE32):
  %2 = builtin "fdiv_FPIEEE32"(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  return %2 : $Builtin.FPIEEE32
}

sil @chain_rule : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
bb0(%0 : @trivial $Builtin.FPIEEE32, %1 : @trivial $Builtin.FPIEEE32):
  %2 = builtin "fneg_FPIEEE32"(%0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  %3 = builtin "fmul_FPIEEE32"(%1 : $Builtin.FPIEEE32, %2 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  return %3 : $Builtin.FPIEEE32
}

sil @add_literals : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
bb0(%0 : @trivial $Builtin.FPIEEE32, %1 : @trivial $Builtin.FPIEEE32):
  %2 = builtin "fneg_FPIEEE32"(%0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  %3 = builtin "fmul_FPIEEE32"(%1 : $Builtin.FPIEEE32, %2 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  %4 = float_literal $Builtin.FPIEEE32, 100
  %5 = builtin "fsub_FPIEEE32"(%4 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  return %5 : $Builtin.FPIEEE32
}

sil @fanout : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
bb0(%0 : @trivial $Builtin.FPIEEE32, %1 : @trivial $Builtin.FPIEEE32):
  // f(x, y) =
  //   let v0 = x * x,
  //       v1 = y * v0,
  //       v4 = x * v0
  //    in v4
  %2 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  %3 = builtin "fmul_FPIEEE32"(%1 : $Builtin.FPIEEE32, %2 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  %4 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %2 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  return %4 : $Builtin.FPIEEE32
}

sil [Onone] @main : $@convention(thin) (Builtin.FPIEEE32) -> () {
bb0(%0 : @trivial $Builtin.FPIEEE32):
  %simple_mul = function_ref @simple_mul : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32
  %simple_mul_grad = gradient [source 0] [wrt 0, 1] %simple_mul : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32

  %simple_div = function_ref @simple_div : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32
  %simple_div_grad = gradient [source 0] [wrt 0, 1] %simple_div : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32

  %chain_rule = function_ref @chain_rule : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32
  %chain_rule_grad = gradient [source 0] [wrt 0, 1] %chain_rule : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32

  %add_literals = function_ref @add_literals : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32
  %add_literals_grad = gradient [source 0] [wrt 0, 1] %add_literals : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32

  %fanout = function_ref @fanout : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32
  %fanout_grad = gradient [source 0] [wrt 0, 1] %fanout : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32

  %ret = tuple ()
  return %ret : $()
}

// CHECK-LABEL: struct AD__simple_mul__Type__src_0_wrt_0_1 {
// CHECK:   @sil_stored var v_0: Builtin.FPIEEE32
// CHECK: }

// CHECK-LABEL: struct AD__simple_div__Type__src_0_wrt_0_1 {
// CHECK:   @sil_stored var v_0: Builtin.FPIEEE32
// CHECK: }

// CHECK-LABEL: struct AD__chain_rule__Type__src_0_wrt_0_1 {
// CHECK:   @sil_stored var v_0: Builtin.FPIEEE32
// CHECK:   @sil_stored var v_1: Builtin.FPIEEE32
// CHECK: }

// CHECK-LABEL: struct AD__add_literals__Type__src_0_wrt_0_1 {
// CHECK:   @sil_stored var v_0: Builtin.FPIEEE32
// CHECK:   @sil_stored var v_1: Builtin.FPIEEE32
// CHECK:   @sil_stored var v_2: Builtin.FPIEEE32
// CHECK: }

// CHECK-LABEL: struct AD__fanout__Type__src_0_wrt_0_1 {
// CHECK:   @sil_stored var v_0: Builtin.FPIEEE32
// CHECK:   @sil_stored var v_1: Builtin.FPIEEE32
// CHECK:   @sil_stored var v_2: Builtin.FPIEEE32
// CHECK: }

// CHECK-LABEL: [reverse_differentiable source 0 wrt 0, 1 primal @AD__simple_mul__primal_src_0_wrt_0_1 adjoint @AD__simple_mul__adjoint_src_0_wrt_0_1] @simple_mul
// CHECK-LABEL: [reverse_differentiable source 0 wrt 0, 1 primal @AD__chain_rule__primal_src_0_wrt_0_1 adjoint @AD__chain_rule__adjoint_src_0_wrt_0_1] @chain_rule
// CHECK-LABEL: [reverse_differentiable source 0 wrt 0, 1 primal @AD__add_literals__primal_src_0_wrt_0_1 adjoint @AD__add_literals__adjoint_src_0_wrt_0_1] @add_literals
// CHECK-LABEL [reverse_differentiable source 0 wrt 0, 1 primal @AD__fanout__primal_src_0_wrt_0_1 adjoint @AD__fanout__adjoint_src_0_wrt_0_1] @fanout

// CHECK-LABEL: @AD__simple_mul__primal_src_0_wrt_0_1
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32):
// CHECK:   %2 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %3 = struct $AD__simple_mul__Type__src_0_wrt_0_1 (%2 : $Builtin.FPIEEE32)
// CHECK:   %4 = tuple (%3 : $AD__simple_mul__Type__src_0_wrt_0_1, %2 : $Builtin.FPIEEE32)
// CHECK:   return %4 : $(AD__simple_mul__Type__src_0_wrt_0_1, Builtin.FPIEEE32)
// CHECK: }

// CHECK-LABEL: @AD__chain_rule__primal_src_0_wrt_0_1
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32):
// CHECK:   %2 = builtin "fneg_FPIEEE32"(%0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %3 = builtin "fmul_FPIEEE32"(%1 : $Builtin.FPIEEE32, %2 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %4 = struct $AD__chain_rule__Type__src_0_wrt_0_1 (%2 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32)
// CHECK:   %5 = tuple (%4 : $AD__chain_rule__Type__src_0_wrt_0_1, %3 : $Builtin.FPIEEE32)
// CHECK:   return %5 : $(AD__chain_rule__Type__src_0_wrt_0_1, Builtin.FPIEEE32)
// CHECK: }

// CHECK-LABEL: @AD__add_literals__primal_src_0_wrt_0_1
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32):
// CHECK:   %2 = builtin "fneg_FPIEEE32"(%0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %3 = builtin "fmul_FPIEEE32"(%1 : $Builtin.FPIEEE32, %2 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %4 = float_literal $Builtin.FPIEEE32, 0x64
// CHECK:   %5 = builtin "fsub_FPIEEE32"(%4 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %6 = struct $AD__add_literals__Type__src_0_wrt_0_1 (%2 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32, %5 : $Builtin.FPIEEE32)
// CHECK:   %7 = tuple (%6 : $AD__add_literals__Type__src_0_wrt_0_1, %5 : $Builtin.FPIEEE32)
// CHECK:   return %7 : $(AD__add_literals__Type__src_0_wrt_0_1, Builtin.FPIEEE32)
// CHECK: }

// CHECK-LABEL: @AD__fanout__primal_src_0_wrt_0_1
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32):
// CHECK:   %2 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %3 = builtin "fmul_FPIEEE32"(%1 : $Builtin.FPIEEE32, %2 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %4 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %2 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %5 = struct $AD__fanout__Type__src_0_wrt_0_1 (%2 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32)
// CHECK:   %6 = tuple (%5 : $AD__fanout__Type__src_0_wrt_0_1, %4 : $Builtin.FPIEEE32)
// CHECK:   return %6 : $(AD__fanout__Type__src_0_wrt_0_1, Builtin.FPIEEE32)
// CHECK: }

// CHECK-LABEL: @AD__simple_mul__adjoint_src_0_wrt_0_1
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32, %2 : $AD__simple_mul__Type__src_0_wrt_0_1, %3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32):
// CHECK:   %5 = builtin "fmul_FPIEEE32"(%4 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %6 = builtin "fmul_FPIEEE32"(%4 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %7 = tuple (%5 : $Builtin.FPIEEE32, %6 : $Builtin.FPIEEE32)
// CHECK:   return %7 : $(Builtin.FPIEEE32, Builtin.FPIEEE32)
// CHECK: }

// CHECK-LABEL: @AD__simple_div__adjoint_src_0_wrt_0_1
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32, %2 : $AD__simple_div__Type__src_0_wrt_0_1, %3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32):
// CHECK:   %5 = builtin "fdiv_FPIEEE32"(%4 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %6 = builtin "fneg_FPIEEE32"(%0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %7 = builtin "fmul_FPIEEE32"(%1 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %8 = builtin "fdiv_FPIEEE32"(%6 : $Builtin.FPIEEE32, %7 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %9 = builtin "fmul_FPIEEE32"(%4 : $Builtin.FPIEEE32, %8 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %10 = tuple (%5 : $Builtin.FPIEEE32, %9 : $Builtin.FPIEEE32)
// CHECK:   return %10 : $(Builtin.FPIEEE32, Builtin.FPIEEE32)
// CHECK: }

// CHECK-LABEL: @AD__chain_rule__adjoint_src_0_wrt_0_1
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32, %2 : $AD__chain_rule__Type__src_0_wrt_0_1, %3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32):
// CHECK:   %5 = struct_extract %2 : $AD__chain_rule__Type__src_0_wrt_0_1, #AD__chain_rule__Type__src_0_wrt_0_1.v_0
// CHECK:   %6 = builtin "fmul_FPIEEE32"(%4 : $Builtin.FPIEEE32, %5 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %7 = builtin "fmul_FPIEEE32"(%4 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %8 = builtin "fneg_FPIEEE32"(%7 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %9 = tuple (%8 : $Builtin.FPIEEE32, %6 : $Builtin.FPIEEE32)
// CHECK:   return %9 : $(Builtin.FPIEEE32, Builtin.FPIEEE32)
// CHECK: }

// CHECK-LABEL: @AD__add_literals__adjoint_src_0_wrt_0_1
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32, %2 : $AD__add_literals__Type__src_0_wrt_0_1, %3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32):
// CHECK:   %5 = builtin "fneg_FPIEEE32"(%4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %6 = struct_extract %2 : $AD__add_literals__Type__src_0_wrt_0_1, #AD__add_literals__Type__src_0_wrt_0_1.v_0
// CHECK:   %7 = builtin "fmul_FPIEEE32"(%5 : $Builtin.FPIEEE32, %6 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %8 = builtin "fmul_FPIEEE32"(%5 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %9 = builtin "fneg_FPIEEE32"(%8 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %10 = tuple (%9 : $Builtin.FPIEEE32, %7 : $Builtin.FPIEEE32)
// CHECK:   return %10 : $(Builtin.FPIEEE32, Builtin.FPIEEE32)
// CHECK: }

// CHECK-LABEL: @AD__fanout__adjoint_src_0_wrt_0_1
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32, %2 : $AD__fanout__Type__src_0_wrt_0_1, %3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32):
// CHECK:   %5 = struct_extract %2 : $AD__fanout__Type__src_0_wrt_0_1, #AD__fanout__Type__src_0_wrt_0_1.v_0
// CHECK:   %6 = builtin "fmul_FPIEEE32"(%4 : $Builtin.FPIEEE32, %5 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %7 = builtin "fmul_FPIEEE32"(%4 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %8 = builtin "fmul_FPIEEE32"(%7 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %9 = builtin "fadd_FPIEEE32"(%6 : $Builtin.FPIEEE32, %8 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %10 = builtin "fadd_FPIEEE32"(%9 : $Builtin.FPIEEE32, %8 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %11 = float_literal $Builtin.FPIEEE32, 0x0
// CHECK:   %12 = tuple (%10 : $Builtin.FPIEEE32, %11 : $Builtin.FPIEEE32)
// CHECK:   return %12 : $(Builtin.FPIEEE32, Builtin.FPIEEE32)
// CHECK: }
