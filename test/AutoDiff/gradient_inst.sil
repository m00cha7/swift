// RUN: %target-sil-opt -sil-print-all %s | %FileCheck %s

sil_stage raw

import Swift

sil @foo : $@convention(thin) (Float, Float) -> Float {
bb0(%0 : @trivial $Float, %1 : @trivial $Float):
  return undef : $Float
}

// CHECK-LABEL: sil @foo : $@convention(thin) (Float, Float) -> Float {
// CHECK-NEXT: bb0(%0 : @trivial $Float, %1 : @trivial $Float):
// CHECK-NEXT:   return undef : $Float
// CHECK-NEXT: }

sil @dfoo : $@convention(thin) (Float, Float) -> (Float, Float) {
bb0(%0 : @trivial $Float, %1 : @trivial $Float):
  %2 = function_ref @foo : $@convention(thin) (Float, Float) -> Float
  %3 = gradient [source 0] [wrt 0, 1] %2 : $@convention(thin) (Float, Float) -> Float
  %4 = apply %3(%0, %1) : $@convention(thin) (Float, Float) -> (Float, Float) 
  return %4 : $(Float, Float)
}

// CHECK-LABEL: sil @dfoo : $@convention(thin) (Float, Float) -> (Float, Float) {
// CHECK: bb0(%0 : @trivial $Float, %1 : @trivial $Float):
// CHECK:   %2 = function_ref @foo : $@convention(thin) (Float, Float) -> Float
// CHECK-NEXT:   %3 = gradient [source 0] [wrt 0, 1] %2 : $@convention(thin) (Float, Float) -> Float
// CHECK-NEXT:   %4 = apply %3(%0, %1) : $@convention(thin) (Float, Float) -> (Float, Float)
// CHECK-NEXT:   return %4 : $(Float, Float)
// CHECK-NEXT: }

sil @dfoo_seedable : $@convention(thin) (Float, Float, Float) -> (Float, Float) {
bb0(%0 : @trivial $Float, %1 : @trivial $Float, %2 : @trivial $Float):
  %3 = function_ref @foo : $@convention(thin) (Float, Float) -> Float
  %4 = gradient [source 0] [wrt 0, 1] [seedable] %3 : $@convention(thin) (Float, Float) -> Float
  %5 = apply %4(%0, %1, %2) : $@convention(thin) (Float, Float, Float) -> (Float, Float)
  return %5 : $(Float, Float)
}

// CHECK-LABEL: sil @dfoo_seedable : $@convention(thin) (Float, Float, Float) -> (Float, Float) {
// CHECK: bb0(%0 : @trivial $Float, %1 : @trivial $Float, %2 : @trivial $Float):
// CHECK:   %3 = function_ref @foo : $@convention(thin) (Float, Float) -> Float
// CHECK-NEXT:   %4 = gradient [source 0] [wrt 0, 1] [seedable] %3 : $@convention(thin) (Float, Float) -> Float
// CHECK-NEXT:   %5 = apply %4(%0, %1, %2) : $@convention(thin) (Float, Float, Float) -> (Float, Float)
// CHECK-NEXT:   return %5 : $(Float, Float)
// CHECK-NEXT: }

sil @dfoo_preserving_result : $@convention(thin) (Float, Float) -> (Float, Float, Float) {
bb0(%0 : @trivial $Float, %1 : @trivial $Float):
  %2 = function_ref @foo : $@convention(thin) (Float, Float) -> Float
  %3 = gradient [source 0] [wrt 0, 1] [preserving_result] %2 : $@convention(thin) (Float, Float) -> Float
  %4 = apply %3(%0, %1) : $@convention(thin) (Float, Float) -> (Float, Float, Float)
  return %4 : $(Float, Float, Float)
}

// CHECK_LABEL: sil @dfoo_preserving_result : $@convention(thin) (Float, Float) -> (Float, Float, Float) {
// CHECK: bb0(%0 : @trivial $Float, %1 : @trivial $Float):
// CHECK:   %2 = function_ref @foo : $@convention(thin) (Float, Float) -> Float
// CHECK-NEXT:   %3 = gradient [source 0] [wrt 0, 1] [preserving_result] %2 : $@convention(thin) (Float, Float) -> Float
// CHECK-NEXT:   %4 = apply %3(%0, %1) : $@convention(thin) (Float, Float) -> (Float, Float, Float)
// CHECK-NEXT:   return %4 : $(Float, Float, Float)
// CHECK-NEXT: }